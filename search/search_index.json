{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 This is a page about the goploader project. The philosophy of goploader is that it should be easy to share files from your terminal. If you want to share a file with a few of your friends for example. This project is composed of a client and a server. Both are free (as in speech and as in beer) and you can install, tweak or do whatever you want with the code. If you want people to use your service with the official client, they will have to modify the ~/.config/goploader.conf.yml file that is created on the first run of the client. Features \u00b6 HTTPS only using Let's Encrypt and Caddy Server Upload directly from stdin Upload a file by giving it as an argument to the client All files are encrypted upon reception and decrypted only when served The key to decrypt files is not saved on the server Curl compliant Note The HTTPS part applies to gpldr.in , but since it depends on the way the application is served and deployed, I can't guarantee it will be the case on other gpldr instances. Motivation \u00b6 First of all, I created goploader as a fun exercise to improve my Golang skills. I wanted to create something useful. Goploader was inspired by the way 0bin works, but I knew I couldn't encrypt files in the browser mainly because I didn't want to on a browser. Basically I merged omploader (which is a dead service now) and 0bin, and the idea was to have a client that would allow painless file upload while keeping the fact that the server never knows what's being uploaded. I wanted to be able to upload files directly from my terminal, with or without a client (curl compatibility). How it works \u00b6 The server and client aren't using a peculiar API, instead they just use multipart forms. This way, a curl command is simple to understand, and simple to use. This ensures that anyone needing to upload files to the server can do it even without a graphic interface or without advanced knowledge in networking. Process \u00b6 When the server receives an upload request, it does multiple steps. Create a unique identifier for the resource (1)* Create a unique key to encrypt the received data (2)* Create an AES cipher that uses the key generated in the second step* Pipe the file reception to that AES cipher* Pipe the output of the AES cipher to a file on disk* Process the whole file through that pipe Store the unique identifier (1) along with the name of the file and delete date in database Return the URL of the resource to the client in the form [scheme][name server]/v/(1)/(2) All the steps with a * at the end are executed before receiving the file. About the encryption key The server never stores the encryption/decryption key. It is generated once to process the file and is immediatly forgotten once given back to the user. Info The file is never read fully in memory. It is buffered, and immediatly piped to the AES cipher. This ensures that the file is never fully stored in RAM unencrypted. The data is streamed through the AES cipher which streams its result to the hard drive. Tip The length of encryption/decryption key can be customised in the configuration file of the server. Technologies \u00b6 The server and client try to keep things minimal. Client \u00b6 Network part is pure Go github.com/atotto/clipboard - Clipboard capabilities github.com/cheggaaa/pb - Progress bar capabilities github.com/ogier/pflag - Posix flags github.com/mitchellh/go-homedir - Home directory detection Server \u00b6 github.com/GeertJohan/go.rice - Resource embedding github.com/gin-gonic/gin - HTTP framework github.com/boltdb/bolt - Embedded key/value datastore github.com/ogier/pflag - Posix flags github.com/dchest/uniuri - Unique URI generator Disclaimer and License \u00b6 As specified multiple times to people interested in the project, I don't provide any kind of warranty. People might tamper with the code on their own server, the only thing I can tell is that the version that runs on my machine is the exact version that is hosted on the Github repository. As a side note, I do store the IP of people uploading files to gpldr.in for debugging purposes and legal requirements, although I never store the decryption key. The MIT License (MIT) Copyright (c) 2015 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Home"},{"location":"#introduction","text":"This is a page about the goploader project. The philosophy of goploader is that it should be easy to share files from your terminal. If you want to share a file with a few of your friends for example. This project is composed of a client and a server. Both are free (as in speech and as in beer) and you can install, tweak or do whatever you want with the code. If you want people to use your service with the official client, they will have to modify the ~/.config/goploader.conf.yml file that is created on the first run of the client.","title":"Introduction"},{"location":"#features","text":"HTTPS only using Let's Encrypt and Caddy Server Upload directly from stdin Upload a file by giving it as an argument to the client All files are encrypted upon reception and decrypted only when served The key to decrypt files is not saved on the server Curl compliant Note The HTTPS part applies to gpldr.in , but since it depends on the way the application is served and deployed, I can't guarantee it will be the case on other gpldr instances.","title":"Features"},{"location":"#motivation","text":"First of all, I created goploader as a fun exercise to improve my Golang skills. I wanted to create something useful. Goploader was inspired by the way 0bin works, but I knew I couldn't encrypt files in the browser mainly because I didn't want to on a browser. Basically I merged omploader (which is a dead service now) and 0bin, and the idea was to have a client that would allow painless file upload while keeping the fact that the server never knows what's being uploaded. I wanted to be able to upload files directly from my terminal, with or without a client (curl compatibility).","title":"Motivation"},{"location":"#how-it-works","text":"The server and client aren't using a peculiar API, instead they just use multipart forms. This way, a curl command is simple to understand, and simple to use. This ensures that anyone needing to upload files to the server can do it even without a graphic interface or without advanced knowledge in networking.","title":"How it works"},{"location":"#process","text":"When the server receives an upload request, it does multiple steps. Create a unique identifier for the resource (1)* Create a unique key to encrypt the received data (2)* Create an AES cipher that uses the key generated in the second step* Pipe the file reception to that AES cipher* Pipe the output of the AES cipher to a file on disk* Process the whole file through that pipe Store the unique identifier (1) along with the name of the file and delete date in database Return the URL of the resource to the client in the form [scheme][name server]/v/(1)/(2) All the steps with a * at the end are executed before receiving the file. About the encryption key The server never stores the encryption/decryption key. It is generated once to process the file and is immediatly forgotten once given back to the user. Info The file is never read fully in memory. It is buffered, and immediatly piped to the AES cipher. This ensures that the file is never fully stored in RAM unencrypted. The data is streamed through the AES cipher which streams its result to the hard drive. Tip The length of encryption/decryption key can be customised in the configuration file of the server.","title":"Process"},{"location":"#technologies","text":"The server and client try to keep things minimal.","title":"Technologies"},{"location":"#client","text":"Network part is pure Go github.com/atotto/clipboard - Clipboard capabilities github.com/cheggaaa/pb - Progress bar capabilities github.com/ogier/pflag - Posix flags github.com/mitchellh/go-homedir - Home directory detection","title":"Client"},{"location":"#server","text":"github.com/GeertJohan/go.rice - Resource embedding github.com/gin-gonic/gin - HTTP framework github.com/boltdb/bolt - Embedded key/value datastore github.com/ogier/pflag - Posix flags github.com/dchest/uniuri - Unique URI generator","title":"Server"},{"location":"#disclaimer-and-license","text":"As specified multiple times to people interested in the project, I don't provide any kind of warranty. People might tamper with the code on their own server, the only thing I can tell is that the version that runs on my machine is the exact version that is hosted on the Github repository. As a side note, I do store the IP of people uploading files to gpldr.in for debugging purposes and legal requirements, although I never store the decryption key. The MIT License (MIT) Copyright (c) 2015 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Disclaimer and License"},{"location":"curl/","text":"Quick Doc \u00b6 Simply curl https://gpldr.in to see a small reminder/documentation on how to use the service. Usage \u00b6 One of the main goal of goploader is the ease of use. That's also why the goploader server doesn't use a JSON API, to guarantee that any user can upload files painlessly. You can use this service without a client, simply by issuing curl commands. Upload the file named myfile.txt $ curl -F file=@myfile.txt https://gpldr.in/ Change the name of the file to \"myamazingfile!\" $ curl -F name=\"myamazingfile!\" -F file=@myfile.txt https://gpldr.in/ Upload from stdin $ tree | curl -F file=@- https://gpldr.in/ Upload a file from stdin $ curl -F file=@- https://gpldr.in/ < myfile.txt Specify the lifetime of your file $ curl -F file=@- -F duration=1w https://gpldr.in/ < myfile.txt Specify that the file is visible only once $ curl -F file=@- -F once=\"true\" https://gpldr.in/ < myfile.txt Lifetime options See the Client/Documentation for more information about the possible values of the duration field. File Manager Integration \u00b6 If you want, you can add an entry to the contextual menu of your file manager to upload a file. The trick is to use the .desktop files and to copy the returned URL to your clipboard once the file is uploaded. Here is an example goploader.desktop that you can put in your ~/.local/share/file-manager/actions/ directory : [Desktop Entry] Type = Action Tooltip = Upload file on Goploader Name = Upload on Goploader... Profiles = goploader_onfile; [X-Action-Profile goploader_onfile] MimeTypes = all/allfiles; SelectionCount = =1 Exec = curl -F file=@%d/%b https://gpldr.in/ | xclip Note You will need xclip to copy the returned URL to your clipboard.","title":"Curl"},{"location":"curl/#quick-doc","text":"Simply curl https://gpldr.in to see a small reminder/documentation on how to use the service.","title":"Quick Doc"},{"location":"curl/#usage","text":"One of the main goal of goploader is the ease of use. That's also why the goploader server doesn't use a JSON API, to guarantee that any user can upload files painlessly. You can use this service without a client, simply by issuing curl commands. Upload the file named myfile.txt $ curl -F file=@myfile.txt https://gpldr.in/ Change the name of the file to \"myamazingfile!\" $ curl -F name=\"myamazingfile!\" -F file=@myfile.txt https://gpldr.in/ Upload from stdin $ tree | curl -F file=@- https://gpldr.in/ Upload a file from stdin $ curl -F file=@- https://gpldr.in/ < myfile.txt Specify the lifetime of your file $ curl -F file=@- -F duration=1w https://gpldr.in/ < myfile.txt Specify that the file is visible only once $ curl -F file=@- -F once=\"true\" https://gpldr.in/ < myfile.txt Lifetime options See the Client/Documentation for more information about the possible values of the duration field.","title":"Usage"},{"location":"curl/#file-manager-integration","text":"If you want, you can add an entry to the contextual menu of your file manager to upload a file. The trick is to use the .desktop files and to copy the returned URL to your clipboard once the file is uploaded. Here is an example goploader.desktop that you can put in your ~/.local/share/file-manager/actions/ directory : [Desktop Entry] Type = Action Tooltip = Upload file on Goploader Name = Upload on Goploader... Profiles = goploader_onfile; [X-Action-Profile goploader_onfile] MimeTypes = all/allfiles; SelectionCount = =1 Exec = curl -F file=@%d/%b https://gpldr.in/ | xclip Note You will need xclip to copy the returned URL to your clipboard.","title":"File Manager Integration"},{"location":"client/build/","text":"If you don't want to download a pre-compiled version of goploader client you can build it from source. Otherwise you can directly download a pre-compiled binary here . Prerequisites \u00b6 A recent version Go installed on your machine $GOPATH should be set to the appropriate directory The dep tool must be installed : go get -u github.com/golang/dep/cmd/dep Clone the repo \u00b6 $ mkdir -p $GOPATH /src/github.com/Depado/ $ cd $GOPATH /src/github.com/Depado/ $ git clone https://github.com/Depado/goploader.git $ cd goploader/ $ dep ensure Build \u00b6 Now all you have to do is build the client : $ cd $ go build -i -o gpldr github.com/Depado/goploader/client Next steps \u00b6 Ensure you have $GOPATH/bin added to your standard $PATH so you can have access to the binary you just built. Then head over to the client's documentation to learn how to use it.","title":"Build From Source"},{"location":"client/build/#prerequisites","text":"A recent version Go installed on your machine $GOPATH should be set to the appropriate directory The dep tool must be installed : go get -u github.com/golang/dep/cmd/dep","title":"Prerequisites"},{"location":"client/build/#clone-the-repo","text":"$ mkdir -p $GOPATH /src/github.com/Depado/ $ cd $GOPATH /src/github.com/Depado/ $ git clone https://github.com/Depado/goploader.git $ cd goploader/ $ dep ensure","title":"Clone the repo"},{"location":"client/build/#build","text":"Now all you have to do is build the client : $ cd $ go build -i -o gpldr github.com/Depado/goploader/client","title":"Build"},{"location":"client/build/#next-steps","text":"Ensure you have $GOPATH/bin added to your standard $PATH so you can have access to the binary you just built. Then head over to the client's documentation to learn how to use it.","title":"Next steps"},{"location":"client/documentation/","text":"Features \u00b6 Configure the domain of the goploader instance you want to use Take a screenshot and immediately send it See a progress bar for long uploads (with speed, ETA, etc) Tee what's being uploaded, meaning it will also display it to stdout Define the lifetime of your file easily Define if your file can be downloaded only once Copy the resulting URL to your clipboard Add a delay before starting the upload (or before taking the screenshot) All these features can be enabled/disable with command line flags. Configuration file \u00b6 On the first run, goploader will try to read from ~/.config/goploader.conf.yml . A default configuration will be written in this file if it can't be found. Also, if the ~/.config/ directory doesn't exist, it will be created. This will be executed only once, you'll get a single line of log the first time you'll use the client. Note If you want to use another server than mine (a friend of yours installed the server or your own server), you'll have to edit this file to point to this service. Command line flags \u00b6 Short Long Default Description -c --clipboard false Copies the returned URL directly to the clipboard (needs xclip or xsel) -d --delay 0 Defines a delay before the program executes. In the form of 10s/ 2m/etc\u2026 -n --name Specify the filename you want. This will be the filename of the file when downloading it or viewing it. When uploading a file, defaults to the name of the file. When uploading from stdin, defaults to stdin. -p --progress false Displays a progress bar while uploading the file. Shows ETA, current network speed, percentage and size uploaded. -s --screenshot false Takes a screenshot and directly uploads it. Works nicely with the delay option. At least one of the following softwares must be installed : gnome-screenshot , import or scrot -t --tee false Displays the content on stdout whever you read from stdin or a file. -v --verbose false Activates the debug logs. Useful for troubleshooting. -w --window false When using the screenshot, this option allows you to select a window or a zone to screenshot before uploading it. -l --lifetime 1d Define the lifetime of your file on the server. Basically you need to choose between 30m, 1h, 6h, 1d, 1w which are the equivalent for 30 minutes, 1 or 6 hours, 1 day, and 1 week. -o --once false Your upload will be visible only once and then deleted from the server About flags requiring a software Some flags, such as the -c/--clipboard require some softwares to be installed on your machine. If it is not avalailable, the client won't work with these options, but they are entirely optional. About Windows and MacOS I was not able to test the screenshot option on Mac or Windows so I don't know if they are working properly. Examples \u00b6 This section contains usage examples. Each example is written with both the long arguments and short arguments. Both are equivalent. Take a screenshot of the whole screen after 5 seconds, upload it with a progress bar and copy the returned URL to the clipboard $ goploader --progress --screenshot --delay=\"5s\" --clipboard $ goploader -pscd 5s Select a windows or zone, screenshot that and upload it $ goploader --screenshot --window $ goploader -sw Upload a file with a progress bar $ goploader -p myfile - File as argument $ goploader -p < myfile - File as Stdin $ cat myfile | goploader -p - Pipe About short arguments Short arguments can be concatenated one after another if and only if they don't have to store a value. In short, boolean values can be written one after another as shown in the examples. About the progress bar behaviour When the datasource is stdin, the total size of the file (or the total amount of text a command yields) can't be calculated that's why the progress bar will only display the upload speed. File Manager Integration \u00b6 If you want, you can add an entry to the contextual menu of your file manager to upload a file. The trick is to use the .desktop files and to copy the returned URL to your clipboard once the file is uploaded. Here is an example goploader.desktop that you can put in your ~/.local/share/file-manager/actions/ directory : [Desktop Entry] Type = Action Tooltip = Upload file on Goploader Name = Upload on Goploader... Profiles = goploader_onfile; [X-Action-Profile goploader_onfile] MimeTypes = all/allfiles; SelectionCount = =1 Exec = goploader -c %d/%b","title":"Documentation"},{"location":"client/documentation/#features","text":"Configure the domain of the goploader instance you want to use Take a screenshot and immediately send it See a progress bar for long uploads (with speed, ETA, etc) Tee what's being uploaded, meaning it will also display it to stdout Define the lifetime of your file easily Define if your file can be downloaded only once Copy the resulting URL to your clipboard Add a delay before starting the upload (or before taking the screenshot) All these features can be enabled/disable with command line flags.","title":"Features"},{"location":"client/documentation/#configuration-file","text":"On the first run, goploader will try to read from ~/.config/goploader.conf.yml . A default configuration will be written in this file if it can't be found. Also, if the ~/.config/ directory doesn't exist, it will be created. This will be executed only once, you'll get a single line of log the first time you'll use the client. Note If you want to use another server than mine (a friend of yours installed the server or your own server), you'll have to edit this file to point to this service.","title":"Configuration file"},{"location":"client/documentation/#command-line-flags","text":"Short Long Default Description -c --clipboard false Copies the returned URL directly to the clipboard (needs xclip or xsel) -d --delay 0 Defines a delay before the program executes. In the form of 10s/ 2m/etc\u2026 -n --name Specify the filename you want. This will be the filename of the file when downloading it or viewing it. When uploading a file, defaults to the name of the file. When uploading from stdin, defaults to stdin. -p --progress false Displays a progress bar while uploading the file. Shows ETA, current network speed, percentage and size uploaded. -s --screenshot false Takes a screenshot and directly uploads it. Works nicely with the delay option. At least one of the following softwares must be installed : gnome-screenshot , import or scrot -t --tee false Displays the content on stdout whever you read from stdin or a file. -v --verbose false Activates the debug logs. Useful for troubleshooting. -w --window false When using the screenshot, this option allows you to select a window or a zone to screenshot before uploading it. -l --lifetime 1d Define the lifetime of your file on the server. Basically you need to choose between 30m, 1h, 6h, 1d, 1w which are the equivalent for 30 minutes, 1 or 6 hours, 1 day, and 1 week. -o --once false Your upload will be visible only once and then deleted from the server About flags requiring a software Some flags, such as the -c/--clipboard require some softwares to be installed on your machine. If it is not avalailable, the client won't work with these options, but they are entirely optional. About Windows and MacOS I was not able to test the screenshot option on Mac or Windows so I don't know if they are working properly.","title":"Command line flags"},{"location":"client/documentation/#examples","text":"This section contains usage examples. Each example is written with both the long arguments and short arguments. Both are equivalent. Take a screenshot of the whole screen after 5 seconds, upload it with a progress bar and copy the returned URL to the clipboard $ goploader --progress --screenshot --delay=\"5s\" --clipboard $ goploader -pscd 5s Select a windows or zone, screenshot that and upload it $ goploader --screenshot --window $ goploader -sw Upload a file with a progress bar $ goploader -p myfile - File as argument $ goploader -p < myfile - File as Stdin $ cat myfile | goploader -p - Pipe About short arguments Short arguments can be concatenated one after another if and only if they don't have to store a value. In short, boolean values can be written one after another as shown in the examples. About the progress bar behaviour When the datasource is stdin, the total size of the file (or the total amount of text a command yields) can't be calculated that's why the progress bar will only display the upload speed.","title":"Examples"},{"location":"client/documentation/#file-manager-integration","text":"If you want, you can add an entry to the contextual menu of your file manager to upload a file. The trick is to use the .desktop files and to copy the returned URL to your clipboard once the file is uploaded. Here is an example goploader.desktop that you can put in your ~/.local/share/file-manager/actions/ directory : [Desktop Entry] Type = Action Tooltip = Upload file on Goploader Name = Upload on Goploader... Profiles = goploader_onfile; [X-Action-Profile goploader_onfile] MimeTypes = all/allfiles; SelectionCount = =1 Exec = goploader -c %d/%b","title":"File Manager Integration"},{"location":"client/install/","text":"Archlinux \u00b6 If you're running Archlinux, there is a goploader-client-git package in AUR. Thanks to krion for setting up the AUR package. Note This package will compile and install the latest version of goploader and will also install Go in your machine if you don't already have it. Binary Downloads \u00b6 .btn{ border-radius: 4px; padding: 10px 32px; text-align: center; text-decoration: none; background-color: white; color: black; margin: 5px; border: 1px solid #3f51b5; display: inline-block; } Linux \u00b6 Linux 64-bit Linux 32-bit Linux ARMv7 FreeBSD \u00b6 FreeBSD 64-bit FreeBSD 32-bit MacOS \u00b6 Darwin 64-bit Darwin 32-bit Windows \u00b6 Windows 64-bit Windows 32-bit","title":"Downloads and Install"},{"location":"client/install/#archlinux","text":"If you're running Archlinux, there is a goploader-client-git package in AUR. Thanks to krion for setting up the AUR package. Note This package will compile and install the latest version of goploader and will also install Go in your machine if you don't already have it.","title":"Archlinux"},{"location":"client/install/#binary-downloads","text":".btn{ border-radius: 4px; padding: 10px 32px; text-align: center; text-decoration: none; background-color: white; color: black; margin: 5px; border: 1px solid #3f51b5; display: inline-block; }","title":"Binary Downloads"},{"location":"client/install/#linux","text":"Linux 64-bit Linux 32-bit Linux ARMv7","title":"Linux"},{"location":"client/install/#freebsd","text":"FreeBSD 64-bit FreeBSD 32-bit","title":"FreeBSD"},{"location":"client/install/#macos","text":"Darwin 64-bit Darwin 32-bit","title":"MacOS"},{"location":"client/install/#windows","text":"Windows 64-bit Windows 32-bit","title":"Windows"},{"location":"server/build/","text":"If you don't want to download a pre-compiled version of goploader server you can build it from source. Otherwise you can directly download a pre-compiled binary here . Prerequisites \u00b6 A recent version Go installed on your machine $GOPATH should be set to the appropriate directory The dep tool must be installed : go get -u github.com/golang/dep/cmd/dep Clone the repo \u00b6 $ mkdir -p $GOPATH /src/github.com/Depado/ $ cd $GOPATH /src/github.com/Depado/ $ git clone https://github.com/Depado/goploader.git $ cd goploader/ $ dep ensure Build \u00b6 Now all you have to do is build the project : $ go build -o server github.com/Depado/goploader/server That's it. Now head to the setup part to see how to generate or create the conf.yml file that is necessary for goploader to run. Embedding resources in the binary If you want to include all the assets used by goploader server inside the generated binary you'll have to install the rice tool. $ go get github.com/GeertJohan/go.rice $ go get github.com/GeertJohan/go.rice/rice You can then generate a rice-box.go file by using this command : $ rice embed-go -i = github.com/Depado/goploader/server $ # Or by moving directly into the server dir $ cd server && rice embed-go This step must be executed before building the binary if you want embedded assets.","title":"Build From Source"},{"location":"server/build/#prerequisites","text":"A recent version Go installed on your machine $GOPATH should be set to the appropriate directory The dep tool must be installed : go get -u github.com/golang/dep/cmd/dep","title":"Prerequisites"},{"location":"server/build/#clone-the-repo","text":"$ mkdir -p $GOPATH /src/github.com/Depado/ $ cd $GOPATH /src/github.com/Depado/ $ git clone https://github.com/Depado/goploader.git $ cd goploader/ $ dep ensure","title":"Clone the repo"},{"location":"server/build/#build","text":"Now all you have to do is build the project : $ go build -o server github.com/Depado/goploader/server That's it. Now head to the setup part to see how to generate or create the conf.yml file that is necessary for goploader to run. Embedding resources in the binary If you want to include all the assets used by goploader server inside the generated binary you'll have to install the rice tool. $ go get github.com/GeertJohan/go.rice $ go get github.com/GeertJohan/go.rice/rice You can then generate a rice-box.go file by using this command : $ rice embed-go -i = github.com/Depado/goploader/server $ # Or by moving directly into the server dir $ cd server && rice embed-go This step must be executed before building the binary if you want embedded assets.","title":"Build"},{"location":"server/downloads/","text":".btn{ border-radius: 4px; padding: 10px 32px; text-align: center; text-decoration: none; background-color: white; color: black; margin: 5px; border: 1px solid #3f51b5; display: inline-block; } Standalone Downloads \u00b6 The standalone distribution contains only a binary. All assets and templates (html files, css, js, etc) are included directly in the binary. If you don't intend to modify those assets, this distribution is for you. All you have to do is download the archive, and go the Setup page to read the instructions on how to setup goploader server. Linux 64-bit Standalone Linux ARMv7 Standalone Simple Downloads \u00b6 These downloads contain the pre-compiled binary along with all its assets. You're free to modify what you want in those assets. (HTML templates, CSS, JS) Linux 64-bit Linux ARMv7","title":"Downloads"},{"location":"server/downloads/#standalone-downloads","text":"The standalone distribution contains only a binary. All assets and templates (html files, css, js, etc) are included directly in the binary. If you don't intend to modify those assets, this distribution is for you. All you have to do is download the archive, and go the Setup page to read the instructions on how to setup goploader server. Linux 64-bit Standalone Linux ARMv7 Standalone","title":"Standalone Downloads"},{"location":"server/downloads/#simple-downloads","text":"These downloads contain the pre-compiled binary along with all its assets. You're free to modify what you want in those assets. (HTML templates, CSS, JS) Linux 64-bit Linux ARMv7","title":"Simple Downloads"},{"location":"server/install/","text":"Web Setup \u00b6 There are currently two ways of configuring a goploader server. You can either run the binary a first time and follow the setup instructions in your browser (it will first run on the 8008 port, so make sure this port is available). $ ./server --initial Please go to http://127.0.0.1:8008 to setup goploader. You'll then need to fill the form that is shown to you. This step will generate a conf.yml file next to your binary file. This is the configuration file of your service. You can freely modify it, keep in mind that you'll need to restart the service each time you modify it so the changes are applied. The conf.yml file \u00b6 The other solution is to directly create a conf.yml file next to the binary (or wherever you want, you can actually specify a configuration file with the -c/--conf flag ) The next sections describe how to write and custmomize this file. Server \u00b6 Key Description Default Example name_server The server name to use. This is used to return correct URLs to the clients. gpldr.in port Port on which the server should listen. 8080 8003 host Host on which the server should listen. 127.0.0.1 append_port Set to true if you need to append the port to the name_server in the returned URLs. false false HTTPS \u00b6 Key Description Default Example serve_https Set to true if you want the server to serve its own HTTPS certificate. false false ssl_cert Path to the SSL Certificate. Required if you set serve_https to true. - ssl/my.cert ssl_private_key Path to your SSL private key. Required if you set serve_https to true. - ssl/my.pem Files and Database \u00b6 Key Description Default Example upload_dir Path to the (local or absolute) directory where the files should be stored. up/ up/ db Path to the database. (The database being a single file) goploader.db goploader.db uniuri_length Length of the unique ID of the resources, which is part of the returned URL for each uploaded file. 10 10 key_length Size of the AES cipher key. 16 16 size_limit Maximum size of sent files in MB. 20 20 disk_quota Maximum total size the uploaded files occupy on disk in GB. 0 to disable. 0 3 loglevel Defines a level for the logs. Choices are \"debug\", \"info\", \"error\",\"disabled\". The names are pretty explicit. \"info\" is the most useful one. \"info\" \"info\" Privacy \u00b6 Key Description Default Example sensitive_mode If web interface is activated, hide all information and only display the file upload form. false true stats Display or not the statistics on the main page (number of files uploaded and total size). Note that, even when setting this to false, statistics will still be gathered. false true no_web When set to true, this option completely disable the HTML pages. Upload will only be possible using curl and/or client. false false fulldoc Display or not the link to the full documentation of the project (which you are reading right now) true true Others \u00b6 Key Description Default Example always_download Disable viewing the file in the browser and always offer to download the files false true disable_encryption Disable encryption. Files will be written to disk much faster, but there won't be any server-side encryption. false false prometheus_enabled Enabled Prometheus metrics. This exposes the /metrics endpoint which will expose data for prometheus false true Sensitive Mode \u00b6 This is actually a really important setting. If you know the server will be used to host sensitive information, please set this to true . This will disable any information if the web interface is activated. For example, there won't be any footer, the project's name won't be displayed, only the file upload form will. This is a simple way of not affiliating me to your project/company/organization. This setting will obviously override the fulldoc and stats settings as there won't be anything displayed on the page.","title":"Setup"},{"location":"server/install/#web-setup","text":"There are currently two ways of configuring a goploader server. You can either run the binary a first time and follow the setup instructions in your browser (it will first run on the 8008 port, so make sure this port is available). $ ./server --initial Please go to http://127.0.0.1:8008 to setup goploader. You'll then need to fill the form that is shown to you. This step will generate a conf.yml file next to your binary file. This is the configuration file of your service. You can freely modify it, keep in mind that you'll need to restart the service each time you modify it so the changes are applied.","title":"Web Setup"},{"location":"server/install/#the-confyml-file","text":"The other solution is to directly create a conf.yml file next to the binary (or wherever you want, you can actually specify a configuration file with the -c/--conf flag ) The next sections describe how to write and custmomize this file.","title":"The conf.yml file"},{"location":"server/install/#server","text":"Key Description Default Example name_server The server name to use. This is used to return correct URLs to the clients. gpldr.in port Port on which the server should listen. 8080 8003 host Host on which the server should listen. 127.0.0.1 append_port Set to true if you need to append the port to the name_server in the returned URLs. false false","title":"Server"},{"location":"server/install/#https","text":"Key Description Default Example serve_https Set to true if you want the server to serve its own HTTPS certificate. false false ssl_cert Path to the SSL Certificate. Required if you set serve_https to true. - ssl/my.cert ssl_private_key Path to your SSL private key. Required if you set serve_https to true. - ssl/my.pem","title":"HTTPS"},{"location":"server/install/#files-and-database","text":"Key Description Default Example upload_dir Path to the (local or absolute) directory where the files should be stored. up/ up/ db Path to the database. (The database being a single file) goploader.db goploader.db uniuri_length Length of the unique ID of the resources, which is part of the returned URL for each uploaded file. 10 10 key_length Size of the AES cipher key. 16 16 size_limit Maximum size of sent files in MB. 20 20 disk_quota Maximum total size the uploaded files occupy on disk in GB. 0 to disable. 0 3 loglevel Defines a level for the logs. Choices are \"debug\", \"info\", \"error\",\"disabled\". The names are pretty explicit. \"info\" is the most useful one. \"info\" \"info\"","title":"Files and Database"},{"location":"server/install/#privacy","text":"Key Description Default Example sensitive_mode If web interface is activated, hide all information and only display the file upload form. false true stats Display or not the statistics on the main page (number of files uploaded and total size). Note that, even when setting this to false, statistics will still be gathered. false true no_web When set to true, this option completely disable the HTML pages. Upload will only be possible using curl and/or client. false false fulldoc Display or not the link to the full documentation of the project (which you are reading right now) true true","title":"Privacy"},{"location":"server/install/#others","text":"Key Description Default Example always_download Disable viewing the file in the browser and always offer to download the files false true disable_encryption Disable encryption. Files will be written to disk much faster, but there won't be any server-side encryption. false false prometheus_enabled Enabled Prometheus metrics. This exposes the /metrics endpoint which will expose data for prometheus false true","title":"Others"},{"location":"server/install/#sensitive-mode","text":"This is actually a really important setting. If you know the server will be used to host sensitive information, please set this to true . This will disable any information if the web interface is activated. For example, there won't be any footer, the project's name won't be displayed, only the file upload form will. This is a simple way of not affiliating me to your project/company/organization. This setting will obviously override the fulldoc and stats settings as there won't be anything displayed on the page.","title":"Sensitive Mode"},{"location":"server/running/","text":"Running with Supervisor \u00b6 I enjoy supervisor for its ease of use and the control it offers on the process. You can run the goploader server using a configuration file that could look like that : [program:goploader] directory = /home/youruser/goploader/ command = /home/youruser/goploader/server user = youruser autostart = true autorestart = true stdout_logfile = /var/log/supervisor/goploader_stdout.log stderr_logfile = /var/log/supervisor/goploader_stderr.log Of course you need to replace youruser with the user you installed goploader with. Running with Systemd \u00b6 You can also use a Systemd Unit to launch Goploader on boot. [Unit] Description = goploader [Service] Type = simple User = youruser WorkingDirectory = /home/youruser/goploader ExecStart = /home/youruser/goploader/server [Install] WantedBy = multi-user.target As for supervisor, you'll need to replace youruser with the user you installed goploader with.","title":"Running"},{"location":"server/running/#running-with-supervisor","text":"I enjoy supervisor for its ease of use and the control it offers on the process. You can run the goploader server using a configuration file that could look like that : [program:goploader] directory = /home/youruser/goploader/ command = /home/youruser/goploader/server user = youruser autostart = true autorestart = true stdout_logfile = /var/log/supervisor/goploader_stdout.log stderr_logfile = /var/log/supervisor/goploader_stderr.log Of course you need to replace youruser with the user you installed goploader with.","title":"Running with Supervisor"},{"location":"server/running/#running-with-systemd","text":"You can also use a Systemd Unit to launch Goploader on boot. [Unit] Description = goploader [Service] Type = simple User = youruser WorkingDirectory = /home/youruser/goploader ExecStart = /home/youruser/goploader/server [Install] WantedBy = multi-user.target As for supervisor, you'll need to replace youruser with the user you installed goploader with.","title":"Running with Systemd"},{"location":"server/serve/","text":"Serving with Caddy \u00b6 up.example.com { proxy / 127.0.0.1:8002 { transparent } gzip } Serving with Apache \u00b6 <VirtualHost *:80 > ServerName up.example.com DocumentRoot /data/goploader-server <Directory /data/goploader-server > Require all granted </Directory> ProxyPass / \"http://localhost:8080/\" ProxyPassReverse / \"http://localhost:8080/\" LogLevel warn ErrorLog /data/logs/apache2/goploader.log CustomLog /var/log/apache2/goploader.log combined </VirtualHost>","title":"Serve"},{"location":"server/serve/#serving-with-caddy","text":"up.example.com { proxy / 127.0.0.1:8002 { transparent } gzip }","title":"Serving with Caddy"},{"location":"server/serve/#serving-with-apache","text":"<VirtualHost *:80 > ServerName up.example.com DocumentRoot /data/goploader-server <Directory /data/goploader-server > Require all granted </Directory> ProxyPass / \"http://localhost:8080/\" ProxyPassReverse / \"http://localhost:8080/\" LogLevel warn ErrorLog /data/logs/apache2/goploader.log CustomLog /var/log/apache2/goploader.log combined </VirtualHost>","title":"Serving with Apache"}]}